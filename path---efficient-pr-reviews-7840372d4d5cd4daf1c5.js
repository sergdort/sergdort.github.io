webpackJsonp([0xa64a1a639b3e],{518:function(e,t){e.exports={data:{site:{siteMetadata:{title:"iOS Developer in search for meaning üßò‚Äç‚ôÇÔ∏è",author:"Serg Dort"}},markdownRemark:{id:"/Users/sergdort/Documents/Projects/Personal/blog/src/pages/efficient-pr-reviews/index.md absPath of file >>> MarkdownRemark",html:'<p>There are many articles written about why every software team should use PR reviews in their development process. Today I want to talk about our experience with PR reviews at Sphere, where we are a small team of 2 iOS and 2 Android engineers in a start-up environment, which means that delivering features at speed and quality is the most important.</p>\n<p>I recently looked at number of PRs merged since we moved from Github to GitLab and I was in awe. Since 28 of May 4 people (mostly 2 since the Android team only recently moved to our mono repo) were able to merge 257 PRs. Which is around 4.28 PRs per day. </p>\n<h2>I believe few aspects contributed to efficient PR reviews:</h2>\n<h3>Common architecture</h3>\n<p>We have a common architecture patterns we use, both on the Domain layer in our shared <a href="https://kotlinlang.org/docs/multiplatform.html">KMM</a> library and UI layer where we use <a href="https://amsterdamstandard.com/en/post/modern-android-architecture-with-mvi-design-pattern">MVI</a> powered by <a href="https://github.com/ReactiveCocoa/Loop">Loop</a>. This means that people do not waste time trying to figure out how a feature works.</p>\n<h3>High level of trust</h3>\n<p>In many cases when I review code I do not necessarily look at the correctness of an algorithm. And even if there are bugs, we can always fix them later. Especially if a feature is under a feature flag.</p>\n<h3>Approve PRs early</h3>\n<p>We approve PRs even if there are comments to be addressed. We only request changes in cases where there is a follow-up review needed once a person addressed the comments. Which is my absolute favorite point as you do not need to waste your‚Äôs and other person‚Äôs time to ping them to approve the PR once comments are addressed.</p>\n<h3>Small PRs</h3>\n<p>Which means they can be reviewed within 1-2 min. For that, we use stacked branches. So once you feel like there is an independent piece of change that can be reviewed - you open a PR and branch off to proceed with further work.</p>\n<h2>I would also like to mention common mistakes that happen during PR reviews:</h2>\n<h3>No common way of doing things.</h3>\n<p>By this I mean that it could be that team is using MVVM or MVP. But each ViewModel or Presenter is a completely different beast. That‚Äôs why not only the name of architecture is important but small patters that are used throughout it, e.g how user input is dispatched, how internal state changes are propagated to the UI, how UI is built.</p>\n<h3>Architecture review during PRs.</h3>\n<p>This is probably the most common mistake teams make. And is absolute waste of time on both sides. It‚Äôs too late to review architecture decisions during a PR! If a feature is that complex, that it will impact the work of whole team, then other ceremonies should have happened before it. Like proposals, request for comments, presentations, spikes etc.</p>\n<h3>Nit picking</h3>\n<p>I believe many people will agree they are annoying, especially when someone requests changes for them. There are plenty of tools these days that can insure code style is correct.</p>\n<h3>Large PRs</h3>\n<p>Large PRs slow down review process significantly, people are lazy to pick them up, very often review does not happen in one go.</p>\n<h3>The tone</h3>\n<p>And the last thing is the language. I strongly encourage everyone to stop using works like ‚ÄúI‚Äù and ‚ÄúYou‚Äù in the PR comments. It‚Äôs all about ‚ÄúUs‚Äù, ‚ÄúWe‚Äù and the team.</p>',frontmatter:{title:"Efficient PR reviews",date:"August 25, 2021"}}},pathContext:{slug:"/efficient-pr-reviews/",previous:{fields:{slug:"/collection-view-insert-in-front/"},frontmatter:{title:"Inserting Dynamic Height cells keeping Scroll position"}},next:null}}}});
//# sourceMappingURL=path---efficient-pr-reviews-7840372d4d5cd4daf1c5.js.map